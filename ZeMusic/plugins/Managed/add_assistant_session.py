# -*- coding: utf-8 -*-
"""
ูุนุงูุฌ ุฅุถุงูุฉ ุงูุญุณุงุจ ุงููุณุงุนุฏ ุนุจุฑ Session String
"""

import asyncio
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError, ApiIdInvalidError

from ZeMusic import app
from ZeMusic.pyrogram_compatibility import filters, Message
from ZeMusic.core.telethon_client import telethon_manager
from ZeMusic.logging import LOGGER
from ZeMusic.utils.decorators.admins import AdminRightsCheck
import config

# ูุชุบูุฑ ูุคูุช ูุญูุธ Session Strings ูู ุงูุชุธุงุฑ ุงููุนุงูุฌุฉ
pending_sessions = {}

@app.on_message(filters.command(["ุงุถุงูุฉ_ูุณุงุนุฏ", "add_assistant"]) & filters.private & filters.user(config.OWNER_ID))
async def start_add_assistant(client, message: Message):
    """ุจุฏุก ุนูููุฉ ุฅุถุงูุฉ ุญุณุงุจ ูุณุงุนุฏ"""
    
    await message.reply(
        "๐ค **ุฅุถุงูุฉ ุญุณุงุจ ูุณุงุนุฏ ุฌุฏูุฏ**\n\n"
        "๐ **ุงููุทููุจ:**\n"
        "โข ููุฏ ุงูุฌูุณุฉ (Session String) ููุญุณุงุจ ุงููุณุงุนุฏ\n\n"
        "๐ **ุงูุทุฑููุฉ:**\n"
        "โข ุงุญุตู ุนูู Session String ูู [@StringSessionBot](https://t.me/StringSessionBot)\n"
        "โข ุฃู ูู [@StringGenBot](https://t.me/StringGenBot)\n\n"
        "โ๏ธ **ุฃุฑุณู ููุฏ ุงูุฌูุณุฉ ุงูุขู:**"
    )
    
    # ุชุณุฌูู ุงููุณุชุฎุฏู ูู ุงูุชุธุงุฑ session string
    pending_sessions[message.from_user.id] = {
        'status': 'waiting_session',
        'timestamp': asyncio.get_event_loop().time()
    }

@app.on_message(filters.private & filters.user(config.OWNER_ID) & filters.text)
async def handle_session_input(client, message: Message):
    """ูุนุงูุฌุฉ session string ุงูููุฑุณู"""
    
    user_id = message.from_user.id
    text = message.text.strip()
    
    # ุงูุชุญูู ูู ุฃู ุงููุณุชุฎุฏู ูู ุงูุชุธุงุฑ session
    if user_id not in pending_sessions:
        return
    
    # ุงูุชุญูู ูู ุฃู ุงููุต ูุจุฏู ูู session string
    if not (len(text) > 100 and text.startswith('1')):
        await message.reply(
            "โ **ููุฏ ุงูุฌูุณุฉ ุบูุฑ ุตุญูุญ**\n\n"
            "ุชุฃูุฏ ูู ุฃู ุงูููุฏ:\n"
            "โข ูุจุฏุฃ ุจุงูุฑูู 1\n"
            "โข ุทููู ุฃูุซุฑ ูู 100 ุญุฑู\n"
            "โข ููุณูุฎ ุจุงููุงูู ุจุฏูู ุฃุฎุทุงุก\n\n"
            "๐ก **ุฃุฑุณู ููุฏ ุงูุฌูุณุฉ ุงูุตุญูุญ:**"
        )
        return
    
    # ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุชุธุงุฑ
    status_msg = await message.reply(
        "โณ **ุฌุงุฑู ุงูุชุญูู ูู ููุฏ ุงูุฌูุณุฉ...**\n"
        "๐ ูุชู ูุญุต ุตุญุฉ ุงูููุฏ ูุงูุงุชุตุงู"
    )
    
    try:
        # ุฅุถุงูุฉ ุงูุญุณุงุจ ุงููุณุงุนุฏ
        result = await telethon_manager.add_assistant_by_session(text)
        
        if result['success']:
            # ูุฌุญุช ุงูุนูููุฉ
            user_info = result.get('user_info', {})
            assistant_id = result.get('assistant_id')
            
            success_text = (
                "โ **ุชู ุฅุถุงูุฉ ุงูุญุณุงุจ ุงููุณุงุนุฏ ุจูุฌุงุญ!**\n\n"
                f"๐ **ูุนุฑู ุงููุณุงุนุฏ:** `{assistant_id}`\n"
                f"๐ค **ุงูุงุณู:** {user_info.get('first_name', 'ุบูุฑ ูุญุฏุฏ')}\n"
                f"๐ **ุงูููุฒุฑ:** @{user_info.get('username', 'ุบูุฑ ูุญุฏุฏ')}\n"
                f"๐ฑ **ุงููุงุชู:** {user_info.get('phone', 'ูุฎูู')}\n"
                f"๐ **ูุนุฑู ุชูููุฌุฑุงู:** `{user_info.get('id', 'ุบูุฑ ูุญุฏุฏ')}`\n\n"
                "๐ต **ุงูุญุณุงุจ ุฌุงูุฒ ููุงุณุชุฎุฏุงู ูู ุชุดุบูู ุงูููุณููู**"
            )
            
            await status_msg.edit(success_text)
            
        else:
            # ูุดูุช ุงูุนูููุฉ
            error_msg = result.get('error', 'ุฎุทุฃ ุบูุฑ ูุนุฑูู')
            
            await status_msg.edit(
                f"โ **ูุดู ูู ุฅุถุงูุฉ ุงูุญุณุงุจ ุงููุณุงุนุฏ**\n\n"
                f"๐ซ **ุงูุณุจุจ:** {error_msg}\n\n"
                "๐ก **ุงูุญููู:**\n"
                "โข ุชุฃูุฏ ูู ุตุญุฉ ููุฏ ุงูุฌูุณุฉ\n"
                "โข ุชุฃูุฏ ูู ุฃู ุงูุญุณุงุจ ุบูุฑ ูุญุธูุฑ\n"
                "โข ุฌุฑุจ ููุฏ ุฌูุณุฉ ุขุฎุฑ"
            )
    
    except Exception as e:
        LOGGER(__name__).error(f"ุฎุทุฃ ูู ุฅุถุงูุฉ ุงููุณุงุนุฏ: {e}")
        await status_msg.edit(
            f"โ **ุญุฏุซ ุฎุทุฃ ุชููู**\n\n"
            f"๐ง **ุงูุชูุงุตูู:** `{str(e)}`\n\n"
            "๐ **ุญุงูู ูุฑุฉ ุฃุฎุฑู ุฃู ุชูุงุตู ูุน ุงููุทูุฑ**"
        )
    
    finally:
        # ุฅุฒุงูุฉ ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ
        if user_id in pending_sessions:
            del pending_sessions[user_id]

@app.on_message(filters.command(["ุงููุณุงุนุฏูู", "assistants"]) & filters.private & filters.user(config.OWNER_ID))
async def list_assistants(client, message: Message):
    """ุนุฑุถ ูุงุฆูุฉ ุงูุญุณุงุจุงุช ุงููุณุงุนุฏุฉ"""
    
    try:
        # ุงูุญุตูู ุนูู ุงูุญุณุงุจุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        from ZeMusic.core.database import db
        assistants_data = await db.get_assistants()
        total_assistants = len(assistants_data)
        connected_assistants = telethon_manager.get_connected_assistants_count()
        
        if total_assistants == 0:
            await message.reply(
                "๐ **ูุง ุชูุฌุฏ ุญุณุงุจุงุช ูุณุงุนุฏุฉ**\n\n"
                "โ ูุฅุถุงูุฉ ุญุณุงุจ ูุณุงุนุฏ:\n"
                "`/ุงุถุงูุฉ_ูุณุงุนุฏ`"
            )
            return
        
        # ุฅูุดุงุก ุงููุต
        text = (
            f"๐ค **ุงูุญุณุงุจุงุช ุงููุณุงุนุฏุฉ ({total_assistants})**\n"
            f"โ **ูุชุตู:** {connected_assistants}\n"
            f"โ **ุบูุฑ ูุชุตู:** {total_assistants - connected_assistants}\n\n"
        )
        
        # ุงุณุชุฎุฏุงู ุงูุจูุงูุงุช ุงููุญููุฉ ูุณุจูุงู
        
        for i, assistant in enumerate(assistants_data, 1):
            try:
                assistant_id = assistant.get('id')
                is_connected = telethon_manager.is_assistant_connected(assistant_id)
                status_emoji = "๐ข" if is_connected else "๐ด"
                
                # ูุนูููุงุช ุขููุฉ ูุน ุงูุชุนุงูู ูุน ุงูููู ุงูููููุฏุฉ
                name = assistant.get('name') or assistant.get('username') or f"Assistant_{assistant_id}"
                username = assistant.get('username', 'ุบูุฑ ูุญุฏุฏ')
                created_at = assistant.get('created_at', 'ุบูุฑ ูุญุฏุฏ')
                
                # ุชูุณูู ุงูุชุงุฑูุฎ
                if created_at != 'ุบูุฑ ูุญุฏุฏ' and len(str(created_at)) > 10:
                    created_at = str(created_at)[:10]
                
                text += (
                    f"{status_emoji} **ุงููุณุงุนุฏ {i}**\n"
                    f"โ ๐ **ุงููุนุฑู:** `{assistant_id}`\n"
                    f"โ ๐ค **ุงูุงุณู:** {name}\n"
                    f"โ ๐ **ุงูููุฒุฑ:** @{username}\n"
                    f"โ ๐ **ููุถุงู:** {created_at}\n\n"
                )
                
            except Exception as e:
                LOGGER(__name__).error(f"ุฎุทุฃ ูู ุนุฑุถ ุจูุงูุงุช ุงููุณุงุนุฏ {i}: {e}")
                text += f"๐ด **ุงููุณุงุนุฏ {i}** - ุฎุทุฃ ูู ุงูุจูุงูุงุช\n\n"
        
        text += (
            "โ๏ธ **ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:**\n"
            "โข `/ุงุถุงูุฉ_ูุณุงุนุฏ` - ุฅุถุงูุฉ ุญุณุงุจ ุฌุฏูุฏ\n"
            "โข `/ุงููุณุงุนุฏูู` - ุนุฑุถ ูุงุฆูุฉ ุงูุญุณุงุจุงุช\n"
            "โข `/ูุญุต_ูุณุงุนุฏ [ูุนุฑู]` - ูุญุต ุญุณุงุจ ูุญุฏุฏ\n"
            "โข `/ุญุฐู_ูุณุงุนุฏ [ูุนุฑู]` - ุญุฐู ุญุณุงุจ\n"
            "โข `/ุชูุธูู_ุงููุณุงุนุฏูู` - ุญุฐู ุงูุญุณุงุจุงุช ุงููุงุณุฏุฉ\n"
            "โข `/ุงุนุงุฏุฉ_ุชุญููู_ุงููุณุงุนุฏูู` - ุฅุนุงุฏุฉ ุชุญููู ุงูุญุณุงุจุงุช"
        )
        
        await message.reply(text)
        
    except Exception as e:
        LOGGER(__name__).error(f"ุฎุทุฃ ูู ุนุฑุถ ุงููุณุงุนุฏูู: {e}")
        await message.reply(f"โ ุฎุทุฃ ูู ุนุฑุถ ุงููุงุฆูุฉ: {str(e)}")

@app.on_message(filters.command(["ุญุฐู_ูุณุงุนุฏ", "remove_assistant"]) & filters.private & filters.user(config.OWNER_ID))
async def remove_assistant_command(client, message: Message):
    """ุญุฐู ุญุณุงุจ ูุณุงุนุฏ"""
    
    try:
        # ุงูุชุญูู ูู ูุฌูุฏ ูุนุฑู
        if len(message.command) < 2:
            await message.reply(
                "โ **ูุฌุจ ุชุญุฏูุฏ ูุนุฑู ุงูุญุณุงุจ ุงููุณุงุนุฏ**\n\n"
                "๐ **ุงูุงุณุชุฎุฏุงู:**\n"
                "`/ุญุฐู_ูุณุงุนุฏ [ูุนุฑู_ุงููุณุงุนุฏ]`\n\n"
                "๐ก **ููุญุตูู ุนูู ูุงุฆูุฉ ุงููุณุงุนุฏูู:**\n"
                "`/ุงููุณุงุนุฏูู`"
            )
            return
        
        assistant_id = int(message.command[1])
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุงุนุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฃููุงู
        from ZeMusic.core.database import db
        assistant_data = await db.get_assistant_by_id(assistant_id)
        
        if not assistant_data:
            await message.reply(f"โ **ุงูุญุณุงุจ ุงููุณุงุนุฏ {assistant_id} ุบูุฑ ููุฌูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช**")
            return
        
        # ุญุฐู ุงููุณุงุนุฏ
        success = await telethon_manager.remove_assistant(assistant_id)
        
        if success:
            # ุญุฐู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
            from ZeMusic.core.database import db
            await db.remove_assistant(assistant_id)
            
            await message.reply(
                f"โ **ุชู ุญุฐู ุงูุญุณุงุจ ุงููุณุงุนุฏ {assistant_id} ุจูุฌุงุญ**\n\n"
                "๐ **ุชู ูุทุน ุงูุงุชุตุงู ูุญุฐู ุงูุจูุงูุงุช**"
            )
        else:
            await message.reply(f"โ **ูุดู ูู ุญุฐู ุงูุญุณุงุจ ุงููุณุงุนุฏ {assistant_id}**")
    
    except ValueError:
        await message.reply("โ **ูุนุฑู ุงููุณุงุนุฏ ูุฌุจ ุฃู ูููู ุฑููุงู**")
    except Exception as e:
        LOGGER(__name__).error(f"ุฎุทุฃ ูู ุญุฐู ุงููุณุงุนุฏ: {e}")
        await message.reply(f"โ **ุฎุทุฃ ูู ุงูุญุฐู:** {str(e)}")

@app.on_message(filters.command(["ูุญุต_ูุณุงุนุฏ", "check_assistant"]) & filters.private & filters.user(config.OWNER_ID))
async def check_assistant_command(client, message: Message):
    """ูุญุต ุญุณุงุจ ูุณุงุนุฏ ูุญุฏุฏ"""
    
    try:
        if len(message.command) < 2:
            await message.reply(
                "โ **ูุฌุจ ุชุญุฏูุฏ ูุนุฑู ุงูุญุณุงุจ ุงููุณุงุนุฏ**\n\n"
                "๐ **ุงูุงุณุชุฎุฏุงู:**\n"
                "`/ูุญุต_ูุณุงุนุฏ [ูุนุฑู_ุงููุณุงุนุฏ]`"
            )
            return
        
        assistant_id = int(message.command[1])
        
        # ุงูุญุตูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        from ZeMusic.core.database import db
        assistant_data = await db.get_assistant_by_id(assistant_id)
        
        if not assistant_data:
            await message.reply(f"โ **ุงูุญุณุงุจ ุงููุณุงุนุฏ {assistant_id} ุบูุฑ ููุฌูุฏ**")
            return
        
        # ูุญุต ุญุงูุฉ ุงูุงุชุตุงู
        is_connected = telethon_manager.is_assistant_connected(assistant_id)
        exists_in_memory = telethon_manager.assistant_exists(assistant_id)
        
        # ุงูุญุตูู ุนูู ูุนูููุงุช ูุจุงุดุฑุฉ ุฅุฐุง ูุงู ูุชุตูุงู
        live_info = await telethon_manager.get_assistant_info(assistant_id) if exists_in_memory else None
        
        status_emoji = "๐ข" if is_connected else "๐ด"
        
        text = (
            f"{status_emoji} **ุชูุงุตูู ุงูุญุณุงุจ ุงููุณุงุนุฏ {assistant_id}**\n\n"
            f"๐ **ุจูุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:**\n"
            f"โ ๐ค **ุงูุงุณู:** {assistant_data.get('name', 'ุบูุฑ ูุญุฏุฏ')}\n"
            f"โ ๐ **ุงูููุฒุฑ:** @{assistant_data.get('username', 'ุบูุฑ ูุญุฏุฏ')}\n"
            f"โ ๐ฑ **ุงููุงุชู:** {assistant_data.get('phone', 'ูุฎูู')}\n"
            f"โ ๐ **ูุนุฑู ุชูููุฌุฑุงู:** `{assistant_data.get('user_id', 'ุบูุฑ ูุญุฏุฏ')}`\n"
            f"โ ๐ **ุชุงุฑูุฎ ุงูุฅุถุงูุฉ:** {str(assistant_data.get('created_at', 'ุบูุฑ ูุญุฏุฏ'))[:10]}\n\n"
            f"๐ **ุญุงูุฉ ุงูุงุชุตุงู:**\n"
            f"โ ๐พ **ูู ุงูุฐุงูุฑุฉ:** {'โ ูุนู' if exists_in_memory else 'โ ูุง'}\n"
            f"โ ๐ **ูุชุตู:** {'โ ูุชุตู' if is_connected else 'โ ุบูุฑ ูุชุตู'}\n"
        )
        
        if live_info and live_info.get('connected'):
            text += (
                f"โ ๐ก **ูุนูููุงุช ูุจุงุดุฑุฉ:** ูุชุงุญุฉ\n\n"
                f"๐ **ุงูุจูุงูุงุช ุงููุจุงุดุฑุฉ:**\n"
                f"โ ๐ค **ุงูุงุณู:** {live_info.get('first_name', 'ุบูุฑ ูุญุฏุฏ')}\n"
                f"โ ๐ **ุงูููุฒุฑ:** @{live_info.get('username', 'ุบูุฑ ูุญุฏุฏ')}\n"
                f"โ ๐ **ุงููุนุฑู:** `{live_info.get('id', 'ุบูุฑ ูุญุฏุฏ')}`"
            )
        else:
            text += "โ ๐ก **ูุนูููุงุช ูุจุงุดุฑุฉ:** ุบูุฑ ูุชุงุญุฉ"
        
        await message.reply(text)
        
    except ValueError:
        await message.reply("โ **ูุนุฑู ุงููุณุงุนุฏ ูุฌุจ ุฃู ูููู ุฑููุงู**")
    except Exception as e:
        LOGGER(__name__).error(f"ุฎุทุฃ ูู ูุญุต ุงููุณุงุนุฏ: {e}")
        await message.reply(f"โ **ุฎุทุฃ ูู ุงููุญุต:** {str(e)}")

@app.on_message(filters.command(["ุชูุธูู_ุงููุณุงุนุฏูู", "cleanup_assistants"]) & filters.private & filters.user(config.OWNER_ID))
async def cleanup_assistants_command(client, message: Message):
    """ุชูุธูู ุงูุญุณุงุจุงุช ุงููุณุงุนุฏุฉ ุงููุงุณุฏุฉ"""
    
    status_msg = await message.reply("๐งน **ุฌุงุฑู ุชูุธูู ุงูุญุณุงุจุงุช ุงููุงุณุฏุฉ...**")
    
    try:
        # ุชูุธูู ุงูุญุณุงุจุงุช ุงููุงุณุฏุฉ
        await telethon_manager.cleanup_idle_assistants()
        
        # ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช ุงููุญุฏุซุฉ
        total_count = telethon_manager.get_assistants_count()
        connected_count = telethon_manager.get_connected_assistants_count()
        
        await status_msg.edit(
            f"โ **ุชู ุชูุธูู ุงูุญุณุงุจุงุช ุจูุฌุงุญ**\n\n"
            f"๐๏ธ **ุชู ุฅุฒุงูุฉ ุงูุญุณุงุจุงุช ุงููุงุณุฏุฉ**\n"
            f"๐ข **ูุชุตู:** {connected_count}\n"
            f"๐ฑ **ุงููุฌููุน:** {total_count}\n\n"
            f"๐ง **ุงุณุชุฎุฏู /ุงุนุงุฏุฉ_ุชุญููู_ุงููุณุงุนุฏูู ูุฅุนุงุฏุฉ ุงูุชุญููู**"
        )
        
    except Exception as e:
        LOGGER(__name__).error(f"ุฎุทุฃ ูู ุชูุธูู ุงููุณุงุนุฏูู: {e}")
        await status_msg.edit(f"โ **ุฎุทุฃ ูู ุงูุชูุธูู:** {str(e)}")

@app.on_message(filters.command(["ุงุนุงุฏุฉ_ุชุญููู_ุงููุณุงุนุฏูู", "reload_assistants"]) & filters.private & filters.user(config.OWNER_ID))
async def reload_assistants_command(client, message: Message):
    """ุฅุนุงุฏุฉ ุชุญููู ุงูุญุณุงุจุงุช ุงููุณุงุนุฏุฉ"""
    
    status_msg = await message.reply("๐ **ุฌุงุฑู ุฅุนุงุฏุฉ ุชุญููู ุงูุญุณุงุจุงุช ุงููุณุงุนุฏุฉ...**")
    
    try:
        # ูุทุน ุงุชุตุงู ุงูุญุณุงุจุงุช ุงูุญุงููุฉ ุฃููุงู
        current_assistants = list(telethon_manager.assistant_clients.keys())
        for assistant_id in current_assistants:
            try:
                await telethon_manager.remove_assistant(assistant_id)
            except:
                pass
        
        # ุฅุนุงุฏุฉ ุชุญููู ุงููุณุงุนุฏูู
        loaded_count = await telethon_manager.load_assistants_from_db()
        
        # ุงูุญุตูู ุนูู ุงูุฅุญุตุงุฆูุงุช ุงููุญุฏุซุฉ
        total_count = telethon_manager.get_assistants_count()
        connected_count = telethon_manager.get_connected_assistants_count()
        
        await status_msg.edit(
            f"โ **ุชู ุฅุนุงุฏุฉ ุชุญููู ุงูุญุณุงุจุงุช ุจูุฌุงุญ**\n\n"
            f"๐ **ุชู ุชุญููู:** {loaded_count} ุญุณุงุจ\n"
            f"๐ข **ูุชุตู:** {connected_count}\n"
            f"๐ฑ **ุงููุฌููุน:** {total_count}\n\n"
            f"๐ **ุชู ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุงูุงุชุตุงูุงุช**"
        )
        
    except Exception as e:
        LOGGER(__name__).error(f"ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุชุญููู ุงููุณุงุนุฏูู: {e}")
        await status_msg.edit(f"โ **ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุงูุชุญููู:** {str(e)}")

# ุชูุธูู ุฌูุณุงุช ุงูุงูุชุธุงุฑ ุงูููุชููุฉ ุงูุตูุงุญูุฉ (ูู 5 ุฏูุงุฆู)
async def cleanup_pending_sessions():
    """ุชูุธูู ุงูุฌูุณุงุช ุงููุนููุฉ"""
    while True:
        try:
            current_time = asyncio.get_event_loop().time()
            expired_users = []
            
            for user_id, data in pending_sessions.items():
                if current_time - data['timestamp'] > 300:  # 5 ุฏูุงุฆู
                    expired_users.append(user_id)
            
            for user_id in expired_users:
                del pending_sessions[user_id]
                
            await asyncio.sleep(300)  # ูุญุต ูู 5 ุฏูุงุฆู
            
        except Exception as e:
            LOGGER(__name__).error(f"ุฎุทุฃ ูู ุชูุธูู ุงูุฌูุณุงุช: {e}")
            await asyncio.sleep(60)

# ุจุฏุก ูููุฉ ุงูุชูุธูู
asyncio.create_task(cleanup_pending_sessions())